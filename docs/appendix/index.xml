<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Appendix on Filecoin Spec</title>
    <link>/docs/appendix/</link>
    <description>Recent content in Appendix on Filecoin Spec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/appendix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Address</title>
      <link>/docs/appendix/address/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/appendix/address/</guid>
      <description>A Filecoin address is an identifier that refers to an actor in the Filecoin state. All actors (miner actors, the storage market actor, account actors) have an address. This address encodes information about the network to which an actor belongs, the specific type of address encoding, the address payload itself, and a checksum. The goal of this format is to provide a robust address format that is both easy to use and resistant to errors.</description>
    </item>
    
    <item>
      <title>Filecoin Parameters</title>
      <link>/docs/appendix/network_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/appendix/network_params/</guid>
      <description>Some of these parameters are used around the code in the Filecoin subsystems and abi. Others are used as part of the proofs libraries.
Most are generated/finalized using the orient framework. It is used to modelize the Filecoin network.
Code parameters package node_base import ( addr &amp;#34;github.com/filecoin-project/go-address&amp;#34; ) // Parameters for on-chain calculations are in actors/builtin/network_params.go  ///////////////////////////////////////////////////////////// // Global /////////////////////////////////////////////////////////////  const NETWORK = addr.Testnet // how many sectors should be challenged in surprise post (if miner has fewer, will get dup challenges) const SURPRISE_CHALLENGE_COUNT = 200 // placeholder  const EPOST_SAMPLE_RATE_NUM = 1 // placeholder const EPOST_SAMPLE_RATE_DENOM = 25 // placeholder const SPOST_SAMPLE_RATE_NUM = 1 // placeholder const SPOST_SAMPLE_RATE_DENOM = 50 // placeholder  ///////////////////////////////////////////////////////////// // Consensus /////////////////////////////////////////////////////////////  const FINALITY = 500 // placeholder const SPC_LOOKBACK_TICKET = 1 // we chain blocks together one after the other  Orient parameters    LAMBDA SPACEGAP BLOCK-SIZE-KIB SECTOR-SIZE-GIB     10 0.</description>
    </item>
    
    <item>
      <title>Filecoin Parameters</title>
      <link>/docs/appendix/orient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/appendix/orient/</guid>
      <description>(asdf:load-system :orient) (in-package orient.lang)  #&amp;lt;PACKAGE &amp;#34;ORIENT.LANG&amp;#34;&amp;gt;  (defparameter *filecoin* (get-system &amp;#34;../orient/filecoin.orient&amp;#34;)) (defparameter *input* (interface:get-json-relation-list &amp;#34;../orient/params.json&amp;#34;)) (defparameter *multi-input* (interface:get-json-relation-list &amp;#34;../orient/multi-params.json&amp;#34;))  *MULTI-INPUT*  All Parameters  (let ((result-tuple (extract (solve-for *filecoin* &amp;#39;() *input*)))) (org-present-tuple result-tuple *filecoin*))     Parameter Type Value Description   ACTOR-METHOD BYTES 8 The size required to represent an actor method.   ACTORS-MESSAGES-FRACTION  0.30000004    ACTORS-MESSAGES-PER-BLOCK  32.661842    ADDRESS-SIZE BYTES 35 The size of an address.</description>
    </item>
    
    <item>
      <title>Sharded IPLD Array</title>
      <link>/docs/appendix/sharray/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/appendix/sharray/</guid>
      <description>The Sharray is an IPLD tree structure used to store an array of items. It is designed for usecases that know all items at the time of creation and do not need insertion or deletion.
IPLD Representation Each sharray node is represented by an IPLD node of the following schema:
type Node struct { height Int items [Item] } representation tuple Item may be either a direct value, if height == 0, or the Cid of a child node if height &amp;gt; 0.</description>
    </item>
    
  </channel>
</rss>