<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>System Actors on Filecoin Spec</title>
    <link>/docs/systems/filecoin_vm/sysactors/</link>
    <description>Recent content in System Actors on Filecoin Spec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/systems/filecoin_vm/sysactors/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AccountActor</title>
      <link>/docs/systems/filecoin_vm/sysactors/account_actor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/systems/filecoin_vm/sysactors/account_actor/</guid>
      <description> package account import ( addr &amp;#34;github.com/filecoin-project/go-address&amp;#34; builtin &amp;#34;github.com/filecoin-project/specs-actors/actors/builtin&amp;#34; vmr &amp;#34;github.com/filecoin-project/specs-actors/actors/runtime&amp;#34; cid &amp;#34;github.com/ipfs/go-cid&amp;#34; ) type InvocOutput = vmr.InvocOutput type AccountActor struct{} func (a *AccountActor) Constructor(rt vmr.Runtime) InvocOutput { // Nothing. intentionally left blank. 	rt.ValidateImmediateCallerIs(builtin.SystemActorAddr) return rt.SuccessReturn() } type AccountActorState struct { Address addr.Address } func (AccountActorState) CID() cid.Cid { panic(&amp;#34;TODO&amp;#34;) }  </description>
    </item>
    
    <item>
      <title>CronActor</title>
      <link>/docs/systems/filecoin_vm/sysactors/cron_actor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/systems/filecoin_vm/sysactors/cron_actor/</guid>
      <description>package cron import ( addr &amp;#34;github.com/filecoin-project/go-address&amp;#34; abi &amp;#34;github.com/filecoin-project/specs-actors/actors/abi&amp;#34; builtin &amp;#34;github.com/filecoin-project/specs-actors/actors/builtin&amp;#34; vmr &amp;#34;github.com/filecoin-project/specs-actors/actors/runtime&amp;#34; ) type CronActorState struct{} type CronActor struct { // TODO move Entries into the CronActorState struct 	Entries []CronTableEntry } type CronTableEntry struct { ToAddr addr.Address MethodNum abi.MethodNum } func (a *CronActor) Constructor(rt vmr.Runtime) vmr.InvocOutput { // Nothing. intentionally left blank. 	rt.ValidateImmediateCallerIs(builtin.SystemActorAddr) return rt.SuccessReturn() } func (a *CronActor) EpochTick(rt vmr.Runtime) vmr.InvocOutput { rt.ValidateImmediateCallerIs(builtin.SystemActorAddr) // a.Entries is basically a static registry for now, loaded 	// in the interpreter static registry.</description>
    </item>
    
    <item>
      <title>InitActor</title>
      <link>/docs/systems/filecoin_vm/sysactors/init_actor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/systems/filecoin_vm/sysactors/init_actor/</guid>
      <description>package init import ( &amp;#34;bytes&amp;#34; addr &amp;#34;github.com/filecoin-project/go-address&amp;#34; actor &amp;#34;github.com/filecoin-project/specs-actors/actors&amp;#34; abi &amp;#34;github.com/filecoin-project/specs-actors/actors/abi&amp;#34; builtin &amp;#34;github.com/filecoin-project/specs-actors/actors/builtin&amp;#34; vmr &amp;#34;github.com/filecoin-project/specs-actors/actors/runtime&amp;#34; autil &amp;#34;github.com/filecoin-project/specs-actors/actors/util&amp;#34; cid &amp;#34;github.com/ipfs/go-cid&amp;#34; ) type InvocOutput = vmr.InvocOutput type Runtime = vmr.Runtime type Bytes = abi.Bytes var AssertMsg = autil.AssertMsg type InitActorState struct { // responsible for create new actors 	AddressMap map[addr.Address]abi.ActorID NextID abi.ActorID NetworkName string } func (s *InitActorState) ResolveAddress(address addr.Address) addr.Address { actorID, ok := s.AddressMap[address] if ok { idAddr, err := addr.</description>
    </item>
    
    <item>
      <title>RewardActor</title>
      <link>/docs/systems/filecoin_vm/sysactors/reward_actor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/systems/filecoin_vm/sysactors/reward_actor/</guid>
      <description>RewardActor is where unminted Filecoin tokens are kept. RewardActor contains a RewardMap which is a mapping from owner addresses to Reward structs.
Reward struct is created to preserve the flexibility of introducing block reward vesting into the protocol. MintReward creates a new Reward struct and adds it to the RewardMap.
A Reward struct contains a StartEpoch that keeps track of when this Reward is created, Value that represents the total number of tokens rewarded, and EndEpoch which is when the reward will be fully vested.</description>
    </item>
    
  </channel>
</rss>