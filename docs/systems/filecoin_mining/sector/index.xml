<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sector on Filecoin Spec</title>
    <link>/docs/systems/filecoin_mining/sector/</link>
    <description>Recent content in Sector on Filecoin Spec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/systems/filecoin_mining/sector/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sector Sealing</title>
      <link>/docs/systems/filecoin_mining/sector/sealing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/systems/filecoin_mining/sector/sealing/</guid>
      <description>import file &amp;#34;github.com/filecoin-project/specs/systems/filecoin_files/file&amp;#34; import addr &amp;#34;github.com/filecoin-project/specs/systems/filecoin_vm/actor/address&amp;#34; import deal &amp;#34;github.com/filecoin-project/specs/systems/filecoin_markets/deal&amp;#34; type Path struct {} // TODO  type SealRandomSeed Bytes type SealCfg struct { SectorSize SubsectorCount UInt Partitions UInt } // SealVerifyInfo is the structure of all thte information a verifier // needs to verify a Seal. type SealVerifyInfo struct { MinerID addr.Address OnChain OnChainSealVerifyInfo } // OnChainSealVerifyInfo is the structure of information that must go on chain. type OnChainSealVerifyInfo struct { UnsealedCID UnsealedSectorCID // CommD  SealedCID SealedSectorCID // CommR  RandomSeed SealRandomSeed Proof SealProof DealIDs [deal.</description>
    </item>
    
    <item>
      <title>Sector Set</title>
      <link>/docs/systems/filecoin_mining/sector/sectorset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/systems/filecoin_mining/sector/sectorset/</guid>
      <description> // sector sets type SectorSet [SectorID] type UnsealedSectorSet SectorSet type SealedSectorSet SectorSet // compact sector sets type Bitfield Bytes // TODO: move to the right place -- a lib? type RLEpBitfield Bitfield // TODO: move to the right place -- a lib? type CompactSectorSet RLEpBitfield  </description>
    </item>
    
  </channel>
</rss>