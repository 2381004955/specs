<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stacked DRG Commitments on Filecoin Spec</title>
    <link>/docs/algorithms/porep/porep_commitments/sdr_commitments/</link>
    <description>Recent content in Stacked DRG Commitments on Filecoin Spec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/algorithms/porep/porep_commitments/sdr_commitments/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Stacked DRG Commitments</title>
      <link>/docs/algorithms/porep/porep_commitments/sdr_commitments/sdr_commitments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/algorithms/porep/porep_commitments/sdr_commitments/sdr_commitments/</guid>
      <description>(ql:quickload :orient)     :ORIENT     This section summarizes the Stacked DRG (SDR) Column Commitments algorithm described in Tight PoS - ZigZag. Graph  (defparameter *layers* 4) (defparameter *nodes* 8) (defparameter *regenerate-sdr-graph* nil) (defparameter *dumped-sdr-graph* &amp;#39;(:NODES 8 :CHALLENGED-NODE 7 :LAYERS 4 :RENUMBERED-PERMUTATION (:PERM-LIST (7 4 3 6 1 8 2 5) :TYPE PERM) :REVERSED-PERMUTATION (:PERM-LIST (3 7 8 6 5 1 4 2) :TYPE PERM) :TYPE SDR-GRAPH)) (defparameter *sdr-graph* (if *regenerate-sdr-graph* (make-sdr-graph *nodes* *layers*) (load-from-plist *dumped-sdr-graph*))) (let ((lg (first (sdr-graph-layer-graphs *sdr-graph*)))) (defparameter *comm-d-graph* (make-comm-d-layer-graph (layer-graph-nodes lg) (layer-graph-challenged-node lg) :parent *sdr-graph*)) (defparameter *replica-graph* (make-replica-layer-graph (layer-graph-nodes lg) (layer-graph-challenged-node lg) :parent *sdr-graph* :layers *layers*))) (dump *sdr-graph*)  (:NODES 8 :CHALLENGED-NODE 7 :LAYERS 4 :RENUMBERED-PERMUTATION (:PERM-LIST (7 4 3 6 1 8 2 5) :TYPE PERM) :REVERSED-PERMUTATION (:PERM-LIST (3 7 8 6 5 1 4 2) :TYPE PERM) :TYPE SDR-GRAPH)  (emit-legend nil)   In the following graphs, DRG and expander parents are both generated by a pseudorandom permutation and are provided only to illustrate the nature of the SDR commitment scheme.</description>
    </item>
    
  </channel>
</rss>