<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Filecoin Spec</title>
    <link>/docs/</link>
    <description>Recent content on Filecoin Spec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Filecoin Parameters</title>
      <link>/docs/content/appendix/orient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/content/appendix/orient/</guid>
      <description>All Parameters    Parameter Type Value Description     ACTOR-METHOD BYTES 8 The size required to represent an actor method.   ACTORS-MESSAGES-FRACTION  0.30000004    ACTORS-MESSAGES-PER-BLOCK  32.661842    ADDRESS-SIZE BYTES 35 The size of an address.   ALL-POST-MESSAGES-PER-YEAR  122557560.0    ALL-SEAL-MESSAGES-PER-YEAR  335544320    ALL-SEAL-SIZE-PER-YEAR  335544320    AVG-POSTS-MESSAGES-PER-BLOCK  11.650845    AVG-PROOFS-MESSAGES-PER-BLOCK  43.</description>
    </item>
    
    <item>
      <title>Proof of Spacetime Parameters</title>
      <link>/docs/content/algorithms/proof_of_spacetime_parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/content/algorithms/proof_of_spacetime_parameters/</guid>
      <description>This section describes parameters for Rational-PoSt, the Proof-of-Spacetime used in Filecoin.
   Parameter Type Value Description     POST-CHALLENGE-BLOCKS BLOCKS 480 The time offset before which the actual work of generating the PoSt cannot be started. This is some delta before the end of the Proving Period, and as such less than a single Proving Period.   POST-CHALLENGE-HOURS HOURS 2 PoSt challenge time (see POST_CHALLENGE_BLOCKS).   POST-PROVING-PERIOD BLOCKS 5760 The time interval in which a PoSt has to be submitted    TODO: The above values are tentative and need both backing from research as well as detailed reasoning why we picked them.</description>
    </item>
    
    <item>
      <title>ZigZag Commitments</title>
      <link>/docs/content/algorithms/porep_commitments/zigzag_commitments/zigzag_commitments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/content/algorithms/porep_commitments/zigzag_commitments/zigzag_commitments/</guid>
      <description>This section summarizes the ZigZag Commitments algorithm described in Tight PoS - ZigZag.
Graph Both renumbered (DRG) and reversed (expander) parents are generated by a pseudorandom permutation and are provided only to illustrate the nature of the zigzag commitment scheme. They accurately represent how parent-child relationships change between layers, and are accurate for expander parents. However, this is not representative of the DRG parent selection algorithm.
The following graphs illustrate how the position of challenges, DRG parents, and expander parents change between layers.</description>
    </item>
    
    <item>
      <title>ZigZag Commitments</title>
      <link>/docs/content/algorithms/zigzag_commitments/zigzag_commitments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/content/algorithms/zigzag_commitments/zigzag_commitments/</guid>
      <description>Introduction This document provides a simplified visual explanation of the ZigZag Commitment algorithm described in Tight PoS - ZigZag.
It is intended to confer intuition about the algorithm, and to serve as a reference for implementers. The author of this document and those of the linked paper believe the two are consistent; and converging on this consistent design was a third design goal of this document&amp;rsquo;s construction.
Graph Both renumbered (DRG) and reversed (expander) parents are generated by a pseudorandom permutation and are provided only to illustrate the nature of the zigzag commitment scheme.</description>
    </item>
    
  </channel>
</rss>