Blockchain:
  declare(block_time, seconds)
  Address:
    address_size = cid_size

  Block:
    block_framing_size = block_header_size + messages_size + receipts_size

    Messages:
      declare(messages, integer) // TODO
      messages_size = messages * message_size
      messages_root_cid = cid_size

      Message:
        message_size = to_address + from_address + message_nonce + value + gas_price + gas_limit + actor_method
        to_address = address_size
        from_address = address_size

        Nonce:
          declare(message_nonce, bytes) // TODO
          message_nonce = varint

        Value:
          declare(value, bytes)
          value = u64

        Gas:
          declare(gas_price, bytes)
          gas_price = u64
          declare(gas_limit, bytes)
          gas_limit = u64

        ActorMethod:
          declare(actor_method, bytes) // TODO: actor_method what is it? how big is it?
          actor_method = u64

    Receipts:
      declare(receipts, integer) // TODO
      receipts_size = receipts * message_receipt
      message_receipts_cid = cid_size

      Receipt:
        message_receipt = exit_code + return + gas_used
        declare(exit_code, bytes) // TODO
        exit_code = varint
        declare(return, bytes) // TODO
        return = varint
        declare(gas_used, bytes) // TODO
        gas_used = u64

    BlockHeader (EC):
      declare(block_header_size, bytes)
      assume(block_header_size > 0)
      assume(block_header_size < 1024*1024*10) // assume max is 10MB

      block_header_size = block_header_fixed_size + block_header_variable_size
      block_header_fixed_size = miner_address_size + election_proof_size + parent_weight_size + block_height_size + state_root_cid + messages_root_cid + bls_agg_size + message_receipts_cid + timestamp_size + block_sig_size
      block_header_variable_size = tickets_size + parents_cids

      StateTree:
        state_root_cid = cid_size

      Weight:
        declare(parent_weight_size, bytes) // TODO
        parent_weight_size = u64

      Height:
        declare(block_height_size, bytes) // TODO
        block_height_size = u64

      MinerAddress [CID]:
        miner_address_size = address_size

      ElectionProof (VRFBls) [SLE, BLSSig]:
        declare(election_proof_size, bytes) // TODO
        election_proof_size = 64

      // ElectionProof (VRFSecpk) [SLE, Secpk]:
      //   declare(election_proof_size, bytes) // TODO
      //   election_proof_size = 80

      Parents [CID]:
        declare(parents, integer) // TODO
        parents = expected_winning_miners
        parents_cids = parents * cid_size

      BLSSignatures (BLSSigAgg) [BLSSigAgg]:
        declare(bls_agg_size, bytes) // TODO
        bls_agg_size = 96

      Timestamp:
        declare(timestamp_size, integer) // TODO
        timestamp_size = u64

      // BlockSig (BlockSigSecpk):
        declare(block_sig_size, integer) // TODO
      //    block_sig_size = 80

      BlockSig (BlockSigBls):
        declare(block_sig_size, integer) // TODO
        block_sig_size = 96

      Tickets:
        declare(tickets, integer)
        declare(tickets_size, bytes)
        tickets_size = ticket_size * tickets
        ticket_size = election_proof_size + vdf_proof_size + vdf_output_size
