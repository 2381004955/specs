import ipld "github.com/filecoin-project/specs/libraries/ipld"
import libp2p "github.com/filecoin-project/specs/libraries/libp2p"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"

type PaymentChannel struct {}
type PaymentVoucher struct {}

type RetrievalPeer struct {
    Address  addr.Address
    ID       libp2p.PeerID  // optional
}

type Available struct {}
type Unavailable struct {}
type Unknown struct {}

type RetrievalQueryResponseStatus union {
    Available
    Unavailable
}

type RetrievalQueryItemStatus union {
    Available
    Unavailable
    Unknown
}

type RetrievalQueryParams struct {
    PayloadCid       ipld.CID  // optional, query if miner has this cid in this piece. some miners may not be able to respond.
    Selector         ipld.Selector  // optional, query if miner has this cid in this piece. some miners may not be able to respond.
    MaxPricePerByte  actor.TokenAmount  // optional, tell miner uninterested if more expensive than this
}

type RetrievalQuery struct {
    PieceID ipld.CID  // V0
    RetrievalQueryParams  // V1
}

type RetrievalQueryResponse struct {
    Status                   RetrievalQueryResponseStatus
    PayloadCidFound          RetrievalQueryItemStatus  // V1 - if a PayloadCid was requested, the result
    SelectorFound            RetrievalQueryItemStatus  // V1 - if a Selector was requested, the result

    Size                     uint64  // Total size of piece in bytes
    ExpectedPayloadSize      uint64  // V1 - optional, if PayloadCID + selector are specified and miner knows, can offer an expected size

    PaymentAddress           addr.Address  // address to send funds to -- may be different than miner addr
    MinPricePerByte          actor.TokenAmount
    PieceRetrievalPrice()  // == MinPricePerByte * Size
    PayloadRetrievalPrice()  // V1 - optional == MinPricePerByte * ExpectedPayloadSize
}

type Accepted struct {}
type Failed struct {}
type Rejected struct {}
type Unsealing struct {}
type FundsNeeded struct {}
type Ongoing struct {}
type Completed struct {}
type DealNotFound struct {}

type DealStatus union {
    Accepted
    Failed
    Rejected
    Unsealing
    FundsNeeded
    Ongoing
    Completed
    DealNotFound
}

type RetrievalParams struct {
    PayloadCid    ipld.CID  // V1
    Selector      ipld.Selector  // V1
    PricePerByte  actor.TokenAmount
}

type RetrievalDealID UInt

type RetrievalDealProposal struct {
    Payment          PaymentChannel
    PieceID          ipld.CID
    ID               RetrievalDealID  // V1 - an identifier for the retrieval
    RetrievalParams
}

type Block struct {
    Prefix  Bytes
    Data    Bytes
}

type RetrievalDealResponse struct {
    Status                                    DealStatus
    ID                                        RetrievalDealID  // V1 - an identifier for the retrieval

    // maximum bytes that will send before a payment is required
    MaxBytesUntilPayment                      UInt

    // payment required to proceed
    // may simply be payment owed or it may be more (additional bytes)
    // particularly when approaching end of query
    PaymentRequiredForNextByte                actor.TokenAmount

    // payment owed for data already sent
    PaymentOwedForExistingData                actor.TokenAmount

    // this is the number of bytes
    // that will go out once the next payment is sent
    AdditionalBytesOfferedForNextBytePayment  UInt

    Message                                   string

    Blocks                                    [Block]  // V0 only
}

type RetrievalDealPayment struct {
    ID RetrievalDealID  // V1 - an identifier for the retrieval
    PaymentVoucher
}
