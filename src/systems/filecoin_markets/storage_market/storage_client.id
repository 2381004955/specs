import ipld "github.com/filecoin-project/specs/libraries/ipld"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/storage_market/storage_deal"
import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import libp2p "github.com/filecoin-project/specs/libraries/libp2p"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"

type ClientDeal struct {
    ProposalCid     ipld.CID
    Proposal        deal.StorageDealProposal
    State           StorageDealStatus
    Miner           libp2p.PeerID
    MinerWorker     addr.Address
    DealID          deal.DealID
    PublishMessage  ipld.CID
}

type ProposeStorageDealResult struct {
    ProposalCid ipld.CID
}

type StorageProviderInfo struct {
    Address     addr.Address  // actor address
    Owner       addr.Address
    Worker      addr.Address  // signs messages
    SectorSize  uint64
    PeerID      libp2p.PeerID
}

type StorageClient struct {
    // ListProviders queries chain state and returns active storage providers
    ListProviders()        (providers [StorageProviderInfo], error)

    // ListDeals lists on-chain deals associated with this client
    ListDeals()            (deals [deal.StorageDeal], error)

    // ListInProgressDeals lists deals that are in progress or rejected
    // - but not on chain
    ListInProgressDeals()  (deals [ClientDeal], error)

    // GetInProgressDeal looks up an in progress deal by proposal CID
    GetInProgressDeal(proposalCID ipld.CID) (ClientDeal, error)

    // GetAsk returns the current ask for a storage provider
    GetAsk(info StorageProviderInfo) (StorageAsk, error)

    // ProposeStorageDeal initiates deal negotiation with a Storage Provider
    ProposeStorageDeal(
        info                StorageProviderInfo
        payloadCid          ipld.CID
        proposalExpiration  block.ChainEpoch
        duration            block.ChainEpoch
        price               actor.TokenAmount
        collateral          actor.TokenAmount
    ) (ProposeStorageDealResult, error)

    // GetPaymentEscrow returns the current funds available for deal payment
    GetPaymentEscrow() (StorageParticipantBalance, error)

    // AddPaymentEscrow adds storage collateral
    AddPaymentEscrow(amount actor.TokenAmount) error
}
