import ipld "github.com/filecoin-project/specs/libraries/ipld"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/storage_market/storage_deal"
import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import libp2p "github.com/filecoin-project/specs/libraries/libp2p"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import dt "github.com/filecoin-project/specs/systems/filecoin_files/data_transfer"

// Duplicated from deals package for now
type MinerDeal struct {
    ProposalCid  ipld.CID
    Proposal     deal.StorageDealProposal
    Miner        libp2p.PeerID
    Client       libp2p.PeerID
    State        deal.StorageDealProposal

    Payload      ipld.CID

    DealID       deal.DealID
    SectorID     uint64  // Set when State >= DealStaged
}

// The interface provided for storage providers
type StorageProvider struct {
    AddAsk(price actor.TokenAmount, ttlsecs int64) error

    // ListAsks lists current asks
    ListAsks(addrress addr.Address) [StorageAsk]

    // ListDeals lists on-chain deals associated with this provider
    ListDeals()            (deals [deal.StorageDeal], error)

    // ListIncompleteDeals lists deals that are in progress or rejected
    ListIncompleteDeals()  (deals [MinerDeal], error)

    // AddStorageCollateral adds storage collateral
    AddStorageCollateral(amount actor.TokenAmount) error

    // GetStorageCollateral returns the current collateral balance
    GetStorageCollateral() (StorageParticipantBalance, error)

    // DataTransferValidator methods
    ValidatePush(
        sender    libp2p.PeerID
        voucher   dt.DataTransferVoucher
        PieceRef  ipld.CID
        Selector  ipld.Selector
    )
    ValidatePull(
        receiver  libp2p.PeerID
        voucher   dt.DataTransferVoucher
        PieceRef  ipld.CID
        Selector  ipld.Selector
    )

    // Data Transfer Listener
    OnDataTransferEvent(event dt.DataTransferEvent, channelState dt.DataTransferState)

    // libp2p listener on storage deal query
    OnStorageQueryAsk(request AskRequest)
    OnStorageDealProposal(response DealRequest)
}
